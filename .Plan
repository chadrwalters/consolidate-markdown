# ChatGPT Export Processor Implementation Plan
Status: ðŸŸ¢ In Progress

## Overview
Add support for processing ChatGPT conversation exports into consolidated Markdown files, leveraging the existing consolidate-markdown infrastructure.

## Goals
- [x] Process ChatGPT conversation exports into well-formatted Markdown
- [x] Handle conversation attachments (images, etc.)
- [x] Support efficient caching and incremental updates
- [x] Maintain consistent formatting with other processors
- [x] Provide standardized output format

## Implementation Phases

### Phase 1: Core Processor Implementation âœ…
Status: ðŸŸ¢ Complete

Tasks:
- [x] Create ChatGPTProcessor class
  - [x] Implement base processor interface
  - [x] Add configuration validation
  - [x] Set up basic file handling
- [x] Add JSON parsing for conversations
  - [x] Handle conversations.json structure
  - [x] Parse conversation metadata
  - [x] Extract messages and roles
- [x] Implement Markdown conversion
  - [x] Define conversation format template
  - [x] Handle message formatting
  - [x] Include metadata sections

### Phase 2: Attachment Processing âœ…
Status: ðŸŸ¢ Complete

Tasks:
- [x] Integrate with AttachmentProcessor
  - [x] Map attachment references
  - [x] Handle image processing
  - [x] Update markdown links
- [x] Add attachment caching
  - [x] Implement cache key generation
  - [x] Handle attachment updates
  - [x] Clean up unused attachments

### Phase 3: Standardization and Cleanup âœ…
Status: ðŸŸ¢ Complete

Tasks:
- [x] Standardize output format
  - [x] Update filename format to "YYYYMMDD - Conversation Title.md"
  - [x] Ensure consistent markdown formatting with other processors
  - [x] Verify inline attachment handling matches other processors
- [x] Clean up implementation
  - [x] Remove unnecessary configuration options
  - [x] Ensure GPT image analysis follows standard processor behavior
  - [x] Remove temporary 2-conversation limit
- [x] Verify processor consistency
  - [x] Compare output format with Bear and XBookmarks processors
  - [x] Validate cache behavior matches other processors
  - [x] Confirm attachment handling is uniform

### Phase 4: Testing and Documentation ðŸ”„
Status: ðŸŸ¡ In Progress

Tasks:
- [x] Add unit tests
  - [x] Test conversation parsing
  - [x] Test markdown conversion
  - [x] Test attachment handling
  - [x] Test filename format
  - [x] Test multiple conversations
- [ ] Add integration tests
  - [ ] Test end-to-end processing
  - [ ] Test error handling
  - [ ] Test cache behavior
- [ ] Update documentation
  - [ ] Add usage guide
  - [ ] Document output format
  - [ ] Add example output

## Technical Details

### File Structure
```
src/consolidate_markdown/
  processors/
    chatgpt.py         # New processor implementation âœ“
    __init__.py        # Updated to include new processor âœ“
  tests/
    unit/
      test_chatgpt.py  # Unit tests âœ“
    integration/
      test_chatgpt_integration.py  # Integration tests
```

### Configuration Format
```toml
[[sources]]
type = "chatgptexport"
srcDir = "/path/to/chatgpt/export"
destDir = "/path/to/output"
```

### Markdown Format
```markdown
# Conversation Title

Created: YYYY-MM-DD HH:MM:SS
Updated: YYYY-MM-DD HH:MM:SS (if available)
Model: model-name

## User
Message content with inline attachments

## Assistant
Response content with inline attachments

[... conversation continues ...]
```

## Dependencies
- [x] Existing AttachmentProcessor for image handling
- [x] JSON parsing capabilities
- [x] Markdown generation utilities

## Success Criteria
- [x] All unit tests pass
- [ ] Integration tests pass
- [ ] Documentation is complete
- [x] Standardized output format
- [x] Attachments are properly handled
- [x] Cache system works efficiently
- [x] Output matches existing processor quality

## Notes
- [x] Follow existing processor patterns from BearProcessor and XBookmarksProcessor
- [x] Maintain consistent error handling and logging
- [x] Consider performance for large exports
- [x] Keep output format consistent with other processors

## Next Steps
1. âœ“ Begin with Phase 1 core processor implementation
2. âœ“ Create basic test structure
3. âœ“ Implement conversation parsing
4. âœ“ Add markdown conversion
5. âœ“ Test with sample data
6. âœ“ Complete Phase 2: Attachment Processing
7. âœ“ Complete Phase 3: Standardization and Cleanup
8. [ ] Add integration tests
9. [ ] Complete documentation
10. [ ] Final review and cleanup
