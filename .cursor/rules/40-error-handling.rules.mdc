---
description:
globs:
---
---
title: Error Handling Rules
version: 1.0.0
date: 2025-01-31
status: Active
dependencies:
  - 00-base.rules.mdc
  - 10-python-style.rules.mdc
  - 11-python-typing.rules.mdc
patterns:
  inherit:
    - python.source
  local:
    exceptions:
      - "src/**/exceptions.py"
      - "src/**/errors.py"
    exclude:
      - "src/legacy/**/*.py"
      - "src/deprecated/**/*.py"
---

# Error Handling Rules
# Version: 1.0.0
# Purpose: Define error handling standards and practices
# @since: 1.0.0
# @updated: 2025-01-31
# @requires: @rule(10-python-style.rules.mdc:language_requirements)

# <section: metadata>
metadata:
    version_history:
        1.0.0:
            date: "2025-01-31"
            changes:
                - "Initial version"
                - "Established error hierarchy"
                - "Added recovery procedures"
                - "Defined error reporting"

    dependencies:
        - "@rule(00-base.rules.mdc:code_standards)"
        - "@rule(10-python-style.rules.mdc:language_requirements)"
        - "@rule(11-python-typing.rules.mdc:type_hints)"
# </section: metadata>

# <section: exception_hierarchy>
# @purpose: Define exception class hierarchy and organization
exception_hierarchy:
    base_exceptions:
        - "AppError: Base application exception"
        - "ConfigError: Configuration issues"
        - "ProcessError: Processing failures"
        - "ValidationError: Input validation"
        - "ResourceError: Resource access"

    specialized_exceptions:
        config:
            - "ConfigNotFound"
            - "ConfigInvalid"
            - "ConfigPermission"
        process:
            - "ProcessTimeout"
            - "ProcessFailed"
            - "ProcessInterrupted"
        validation:
            - "InputInvalid"
            - "FormatInvalid"
            - "TypeMismatch"
        resource:
            - "ResourceNotFound"
            - "ResourceUnavailable"
            - "ResourcePermission"

# <section: error_procedures>
# @purpose: Define error handling procedures
error_procedures:
    handling_levels:
        function:
            - "Handle known errors"
            - "Document exceptions"
            - "Preserve context"
            - "Clean up resources"
            - "Log appropriately"

        module:
            - "Aggregate related errors"
            - "Provide error context"
            - "Handle module-specific issues"
            - "Log error patterns"
            - "Maintain consistency"

        application:
            - "Global error handling"
            - "User feedback"
            - "System recovery"
            - "Error reporting"
            - "Monitoring alerts"

# <section: recovery_processes>
# @purpose: Define error recovery strategies
recovery_processes:
    strategies:
        retry:
            - "Exponential backoff"
            - "Maximum attempts"
            - "Failure conditions"
            - "Success criteria"
            - "Timeout limits"

        fallback:
            - "Alternative methods"
            - "Degraded operation"
            - "User notification"
            - "Data preservation"
            - "Service continuity"

        cleanup:
            - "Resource release"
            - "State restoration"
            - "Data consistency"
            - "Log completion"
            - "Notify monitoring"

# <section: error_reporting>
# @purpose: Define error reporting requirements
error_reporting:
    requirements:
        - "Error ID generation"
        - "Stack trace preservation"
        - "Context capture"
        - "User impact assessment"
        - "Resolution status"

    format:
        structured: |
            {
                "error_id": "unique-id",
                "timestamp": "iso-8601",
                "level": "error",
                "code": "error-code",
                "message": "user-friendly-message",
                "details": "technical-details",
                "stack_trace": "formatted-trace",
                "context": {
                    "user": "user-info",
                    "action": "action-info",
                    "state": "state-info"
                }
            }

# <section: debugging>
# @purpose: Define debugging standards and tools
debugging:
    tools:
        - "pdb/ipdb for interactive"
        - "logging for tracing"
        - "debugpy for remote"
        - "profilers for performance"
        - "memory trackers"

    practices:
        - "Reproducible cases"
        - "Minimal examples"
        - "Environment isolation"
        - "Data preservation"
        - "Documentation"

# <section: monitoring>
# @purpose: Define error monitoring requirements
monitoring:
    metrics:
        - "Error rates"
        - "Recovery success"
        - "Performance impact"
        - "Resource usage"
        - "User impact"

    alerts:
        - "Critical failures"
        - "Pattern detection"
        - "Resource exhaustion"
        - "Security incidents"
        - "Recovery failures"

# <section: documentation>
# @purpose: Define error documentation requirements
documentation:
    api:
        - "Expected exceptions"
        - "Error codes"
        - "Recovery steps"
        - "Example handling"
        - "Best practices"

    internal:
        - "Error patterns"
        - "Recovery procedures"
        - "Debug guides"
        - "Incident response"
        - "Postmortem templates"

# <section: best_practices>
# @purpose: Define error handling best practices
best_practices:
    general:
        - "Specific exceptions"
        - "Proper cleanup"
        - "Context preservation"
        - "User guidance"
        - "Recovery paths"

    coding:
        - "Try/except scope"
        - "Resource management"
        - "Error propagation"
        - "State handling"
        - "Logging practices"

    maintenance:
        - "Regular review"
        - "Pattern analysis"
        - "Documentation updates"
        - "Recovery testing"
        - "Monitoring adjustment"
