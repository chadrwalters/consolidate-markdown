---
description:
globs:
---
---
title: Python Typing Rules
version: 1.0.0
date: 2025-01-31
status: Active
dependencies:
  - 00-base.rules.mdc
  - 10-python-style.rules.mdc
patterns:
  inherit:
    - python.source
  local:
    stub_files:
      - "src/**/*.pyi"
      - "stubs/**/*.pyi"
    exclude:
      - "src/legacy/**/*.pyi"
      - "tests/**/*.pyi"
---

# Python Typing Rules
# Version: 1.0.0
# Purpose: Define type hint requirements and validation standards
# @since: 1.0.0
# @updated: 2025-01-31
# @requires: @rule(10-python-style.rules.mdc:language_requirements)

# <section: metadata>
metadata:
    version_history:
        1.0.0:
            date: "2025-01-31"
            changes:
                - "Initial version"
                - "Established type hint standards"
                - "Added mypy configuration"
                - "Defined stub file requirements"

    dependencies:
        - "@rule(00-base.rules.mdc:code_standards)"
        - "@rule(10-python-style.rules.mdc:language_requirements)"
# </section: metadata>

# <section: type_hints>
# @purpose: Define type hint requirements and standards
type_hints:
    general_rules:
        - "All functions must have complete type hints"
        - "Use built-in types when possible"
        - "Prefer composition over inheritance"
        - "Document complex type constructs"
        - "Use type aliases for clarity"

    required_imports:
        - "from typing import (
            Any, Optional, Union, List, Dict, Set,
            Tuple, Sequence, Iterable, Iterator,
            Callable, TypeVar, Generic, Protocol,
            Final, Literal, TypeAlias, cast
          )"
        - "from typing_extensions import (
            NotRequired, Required, TypedDict,
            Annotated, override
          )"

    type_definitions:
        basic:
            - "str, int, float, bool, bytes"
            - "None (use Optional[T] or Union[T, None])"
            - "list[T], dict[K, V], set[T], tuple[T, ...]"
        advanced:
            - "TypeVar('T', bound=BaseClass)"
            - "Protocol for structural typing"
            - "TypedDict for dictionary types"
            - "Literal for exact values"

# <section: validation>
# @purpose: Define type checking and validation requirements
validation:
    mypy:
        version: "1.8.0"
        settings:
            python_version: "3.12"
            strict: true
            warn_return_any: true
            warn_unused_configs: true
            disallow_untyped_defs: true
            check_untyped_defs: true
            disallow_any_unimported: true
            disallow_incomplete_defs: true
            disallow_untyped_decorators: true
            no_implicit_optional: true
            warn_redundant_casts: true
            warn_unused_ignores: true
            warn_no_return: true
            warn_unreachable: true

        configuration: |
            # mypy.ini
            [mypy]
            python_version = 3.12
            strict = True
            warn_return_any = True
            warn_unused_configs = True
            disallow_untyped_defs = True
            check_untyped_defs = True
            disallow_any_unimported = True
            disallow_incomplete_defs = True
            disallow_untyped_decorators = True
            no_implicit_optional = True
            warn_redundant_casts = True
            warn_unused_ignores = True
            warn_no_return = True
            warn_unreachable = True

# <section: stub_files>
# @purpose: Define requirements for type stub files
stub_files:
    requirements:
        - "Stub files required for all public modules"
        - "Must match module interface exactly"
        - "Include all public names"
        - "Document complex types"
        - "Mark internal items with leading underscore"

    organization:
        - "One stub file per module"
        - "Match source directory structure"
        - "Use .pyi extension"
        - "Include in source control"
        - "Document stub file purpose"

    content:
        - "Only type definitions and signatures"
        - "No implementation code"
        - "Include docstrings for complex types"
        - "Mark protocol classes with @runtime_checkable"
        - "Use ... for implementation placeholders"

# <section: best_practices>
# @purpose: Define type hint best practices and patterns
best_practices:
    patterns:
        - "Use TypeVar for generic types"
        - "Prefer Union over Optional when appropriate"
        - "Use Protocol for duck typing"
        - "Define TypeAlias for complex types"
        - "Use Final for constants"
        - "Use Literal for exact values"
        - "Use TypedDict for structured dicts"

    documentation:
        - "Document type variables"
        - "Explain complex type constructs"
        - "Include examples for unusual patterns"
        - "Reference relevant PEPs"
        - "Document type compatibility"

    maintenance:
        - "Regular type checking in CI"
        - "Update stubs with code changes"
        - "Review type coverage reports"
        - "Document type-related decisions"
        - "Monitor typing performance"
