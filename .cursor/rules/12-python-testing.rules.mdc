---
title: Python Testing Rules
version: 1.0.0
date: 2024-03-19
status: Active
dependencies:
  - 00-base.rules.mdc
  - 102025-01-31yle.rules.mdc
  - 11-python-typing.rules.mdc
patterns:
  inherit:
    - python.tests
    - operations.test_files
  local:
    test_data:
      - "tests/data/**/*"
      - "tests/fixtures/**/*"
    exclude:
      - "tests/legacy/**/*"
      - "tests/**/__pycache__/**"
---

# Python Testing Rules
# Version: 1.0.0
# Purpose: Define testing standards and practices
# @since: 1.0.0
# @updated: 2024-03-19
# @requires: @rule(10-python-style.rules.mdc:language_requirements)

# <section: metadata>
metadata:2025-01-31
    version_history:
        1.0.0:
            date: "2024-03-19"
            changes:
                - "Initial version"
                - "Established testing standards"
                - "2025-01-31st configuration"
                - "Defined coverage requirements"

    dependencies:
        - "@rule(00-base.rules.mdc:code_standards)"
        - "@rule(10-python-style.rules.mdc:language_requirements)"
        - "@rule(11-python-typing.rules.mdc:type_hints)"
# </section: metadata>

# <section: test_organization>
# @purpose: Define test organization and structure
test_organization:
    directory_structure:
        - "tests/
            ├── unit/               # Unit tests
            │   ├── test_module1.py
            │   └── test_module2.py
            ├── integration/        # Integration tests
            │   ├── test_feature1.py
            │   └── test_feature2.py
            ├── e2e/               # End-to-end tests
            │   └── test_flows.py
            ├── performance/       # Performance tests
            │   └── test_perf.py
            ├── fixtures/          # Test fixtures
            │   └── data.json
            └── conftest.py        # Shared fixtures"

    naming_conventions:
        files:
            - "test_*.py for test modules"
            - "*_test.py for test modules"
            - "conftest.py for fixtures"
        functions:
            - "test_* for test functions"
            - "*_test for test functions"
        classes:
            - "Test* for test classes"
            - "*Test for test classes"
        fixtures:
            - "fixture_* for fixtures"
            - "*_fixture for fixtures"

# <section: pytest_configuration>
# @purpose: Define pytest settings and plugins
pytest_configuration:
    required_plugins:
        - "pytest-cov: Coverage reporting"
        - "pytest-asyncio: Async support"
        - "pytest-xdist: Parallel testing"
        - "pytest-timeout: Test timeouts"
        - "pytest-randomly: Random ordering"

    settings:
        configuration: |
            # pytest.ini
            [pytest]
            testpaths = tests
            python_files = test_*.py *_test.py
            python_classes = Test* *Test
            python_functions = test_* *_test
            addopts =
                --cov=src
                --cov-report=term-missing
                --cov-report=html
                --randomly-seed=1234
                --timeout=300
                -v

    markers:
        standard:
            - "@pytest.mark.unit: Unit tests"
            - "@pytest.mark.integration: Integration tests"
            - "@pytest.mark.e2e: End-to-end tests"
            - "@pytest.mark.performance: Performance tests"
        custom:
            - "@pytest.mark.slow: Slow tests"
            - "@pytest.mark.network: Tests requiring network"
            - "@pytest.mark.database: Tests requiring database"

# <section: test_requirements>
# @purpose: Define test content and quality standards
test_requirements:
    general:
        - "Every function must have unit tests"
        - "Integration tests for all features"
        - "E2E tests for critical paths"
        - "Performance tests for key operations"
        - "Security tests for sensitive features"

    test_structure:
        - "Arrange: Setup test conditions"
        - "Act: Execute test operation"
        - "Assert: Verify results"
        - "Cleanup: Reset state if needed"

    assertions:
        - "Use pytest assertions"
        - "One logical assertion per test"
        - "Clear failure messages"
        - "Appropriate comparison types"
        - "Handle edge cases"

# <section: test_data>
# @purpose: Define test data management standards
test_data:
    fixtures:
        - "Use pytest fixtures"
        - "Scope appropriately"
        - "Clean up resources"
        - "Document dependencies"
        - "Share common fixtures"

    test_data_management:
        - "Store in version control"
        - "Use appropriate formats"
        - "Document data purpose"
        - "Maintain test isolation"
        - "Clean up test data"

# <section: ci_cd>
# @purpose: Define CI/CD testing requirements
ci_cd:
    requirements:
        - "All tests must pass"
        - "Coverage thresholds met"
        - "Performance benchmarks met"
        - "No security vulnerabilities"
        - "Clean test environment"

    workflow:
        - "Run unit tests first"
        - "Run integration tests"
        - "Run E2E tests"
        - "Generate coverage report"
        - "Archive test results"

# <section: coverage>
# @purpose: Define code coverage requirements
coverage:
    thresholds:
        unit_tests: "90% minimum"
        integration_tests: "80% minimum"
        total_coverage: "85% minimum"

    requirements:
        - "Branch coverage required"
        - "Statement coverage required"
        - "Function coverage required"
        - "Class coverage required"
        - "Document exclusions"

    reporting:
        - "HTML reports required"
        - "Console summary required"
        - "Coverage trends tracked"
        - "Failed thresholds block merge"
        - "Archive coverage reports"

# <section: best_practices>
# @purpose: Define testing best practices
best_practices:
    general:
        - "Write tests first (TDD)"
        - "Keep tests simple"
        - "One concept per test"
        - "Use descriptive names"
        - "Maintain test isolation"

    mocking:
        - "Mock external dependencies"
        - "Use appropriate mock types"
        - "Verify mock interactions"
        - "Reset mocks between tests"
        - "Document mock behavior"

    maintenance:
        - "Regular test cleanup"
        - "Update tests with code"
        - "Remove obsolete tests"
        - "Monitor test performance"
        - "Review test quality"
